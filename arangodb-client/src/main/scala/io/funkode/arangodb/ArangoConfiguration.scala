package io.funkode.arangodb

import scala.concurrent.duration.*
import java.util.concurrent.TimeUnit.*

import zio.config.magnolia.*
import zio.config.*
import zio.config.typesafe.*

final case class ArangoConfiguration(
    host: String,
    port: Int = 8529,
    username: String,
    password: String,
    chunkLength: Long = ArangoConfiguration.CHUNK_LENGTH_DEFAULT,
    readBufferSize: Int = ArangoConfiguration.READ_BUFFER_SIZE_DEFAULT,
    connectTimeout: Duration = ArangoConfiguration.CONNECT_TIMEOUT_DEFAULT,
    replyTimeout: Duration = ArangoConfiguration.REPLY_TIMEOUT_DEFAULT,
    database: models.DatabaseName = models.DatabaseName.system
)

object ArangoConfiguration:

  import ConfigDescriptor.nested

  val CHUNK_LENGTH_DEFAULT: Long = 30000L
  val READ_BUFFER_SIZE_DEFAULT: Int = 256 * 1024
  val CONNECT_TIMEOUT_DEFAULT: Duration = 10.seconds
  val REPLY_TIMEOUT_DEFAULT: Duration = 30.seconds

  @SuppressWarnings(Array("stryker4s.mutation.StringLiteral"))
  val DEFAULT_PATH = "arangodb"

  val arangoConfigDescriptor = descriptor[ArangoConfiguration].mapKey(toKebabCase)

  def fromPath(path: String) = TypesafeConfig.fromResourcePath(nested(path)(arangoConfigDescriptor))
  val default = fromPath(DEFAULT_PATH)
